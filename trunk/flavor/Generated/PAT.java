/* @flavorc
 *
 * PAT.java
 * 
 * This file was automatically generated by flavorc
 * from the source file:
 *     'PAT.fl'
 *
 * For information on flavorc, visit the Flavor Web site at:
 *     http://flavor.sourceforge.net
 *
 * -- Do not edit by hand --
 *
 */

package PAT;
import flavor.*;
import java.io.*;

public class PAT {
    int table_id;
    int section_syntax_indicator;
    int private_indicator;
    int section_length;
    int transport_stream_id;
    int version_number;
    int current_next_indicator;
    int section_number;
    int last_section_number;
    int total_pat_program;
    int loop_cnt;
    PATProgram program;
    int CRC_32;

    public int get(IBitstream _F_bs) throws IOException {
        int _F_ret = 0;
        MapResult _F_mr;
        table_id = _F_bs.getbits(8);
        if (table_id != 0) {
            Util.flerror("Const value mismatch for 'table_id'");
            _F_ret++;
        }
        section_syntax_indicator = _F_bs.getbits(1);
        if (section_syntax_indicator != 1) {
            Util.flerror("Const value mismatch for 'section_syntax_indicator'");
            _F_ret++;
        }
        private_indicator = _F_bs.getbits(1);
        if (private_indicator != 0) {
            Util.flerror("Const value mismatch for 'private_indicator'");
            _F_ret++;
        }
        _F_bs.skipbits(2);
        section_length = _F_bs.getbits(12);
        transport_stream_id = _F_bs.getbits(16);
        _F_bs.skipbits(2);
        version_number = _F_bs.getbits(5);
        current_next_indicator = _F_bs.getbits(1);
        section_number = _F_bs.getbits(8);
        last_section_number = _F_bs.getbits(8);
        total_pat_program = (section_length-9)/4;
        for (loop_cnt=0; loop_cnt<total_pat_program; loop_cnt++) {
            program = new PATProgram();
            _F_ret += program.get(_F_bs);
            if (1==0) break;
        }
        CRC_32 = _F_bs.getbits(32);
        return _F_ret;
    }

    public int put(IBitstream _F_bs) throws IOException {
        int _F_ret = 0;
        MapResult _F_mr;
        int _F_parse = 0;
        _F_parse = 8;
        table_id = 0;
        _F_bs.putbits(table_id, _F_parse);
        _F_parse = 1;
        section_syntax_indicator = 1;
        _F_bs.putbits(section_syntax_indicator, _F_parse);
        _F_parse = 1;
        private_indicator = 0;
        _F_bs.putbits(private_indicator, _F_parse);
        _F_bs.skipbits(2);
        _F_bs.putbits(section_length, 12);
        _F_bs.putbits(transport_stream_id, 16);
        _F_bs.skipbits(2);
        _F_bs.putbits(version_number, 5);
        _F_bs.putbits(current_next_indicator, 1);
        _F_bs.putbits(section_number, 8);
        _F_bs.putbits(last_section_number, 8);
        total_pat_program = (section_length-9)/4;
        for (loop_cnt=0; loop_cnt<total_pat_program; loop_cnt++) {
            _F_ret += program.put(_F_bs);
            if (1==0) break;
        }
        _F_bs.putbits(CRC_32, 32);
        return _F_ret;
    }

    public int putxml(IBitstream _F_bs, boolean bAttr) throws IOException {
        int _F_ret = 0;
        MapResult _F_mr;
        int _F_parse = 0;
        _F_parse = 8;
        table_id = _F_bs.getbits(_F_parse);
        if (table_id != 0) {
            Util.flerror("Const value mismatch for 'table_id'");
            _F_ret++;
            if (bAttr) {
                XML.WriteXmlElement("<table_id type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + table_id + "</table_id>");
            }
            else {
                XML.WriteXmlElement("<table_id bitLen=\"" + _F_parse + "\">" + table_id + "</table_id>");
            }
        }
        else {
            if (bAttr) {
                XML.WriteXmlElement("<table_id type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + table_id + "</table_id>");
            }
            else {
                XML.WriteXmlElement("<table_id bitLen=\"" + _F_parse + "\">" + table_id + "</table_id>");
            }
        }
        _F_parse = 1;
        section_syntax_indicator = _F_bs.getbits(_F_parse);
        if (section_syntax_indicator != 1) {
            Util.flerror("Const value mismatch for 'section_syntax_indicator'");
            _F_ret++;
            if (bAttr) {
                XML.WriteXmlElement("<section_syntax_indicator type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + section_syntax_indicator + "</section_syntax_indicator>");
            }
            else {
                XML.WriteXmlElement("<section_syntax_indicator bitLen=\"" + _F_parse + "\">" + section_syntax_indicator + "</section_syntax_indicator>");
            }
        }
        else {
            if (bAttr) {
                XML.WriteXmlElement("<section_syntax_indicator type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + section_syntax_indicator + "</section_syntax_indicator>");
            }
            else {
                XML.WriteXmlElement("<section_syntax_indicator bitLen=\"" + _F_parse + "\">" + section_syntax_indicator + "</section_syntax_indicator>");
            }
        }
        _F_parse = 1;
        private_indicator = _F_bs.getbits(_F_parse);
        if (private_indicator != 0) {
            Util.flerror("Const value mismatch for 'private_indicator'");
            _F_ret++;
            if (bAttr) {
                XML.WriteXmlElement("<private_indicator type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + private_indicator + "</private_indicator>");
            }
            else {
                XML.WriteXmlElement("<private_indicator bitLen=\"" + _F_parse + "\">" + private_indicator + "</private_indicator>");
            }
        }
        else {
            if (bAttr) {
                XML.WriteXmlElement("<private_indicator type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + private_indicator + "</private_indicator>");
            }
            else {
                XML.WriteXmlElement("<private_indicator bitLen=\"" + _F_parse + "\">" + private_indicator + "</private_indicator>");
            }
        }
        _F_bs.skipbits(2);
        _F_parse = 12;
        section_length = _F_bs.getbits(_F_parse);
        if (bAttr) {
            XML.WriteXmlElement("<section_length type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + section_length + "</section_length>");
        }
        else {
            XML.WriteXmlElement("<section_length bitLen=\"" + _F_parse + "\">" + section_length + "</section_length>");
        }
        _F_parse = 16;
        transport_stream_id = _F_bs.getbits(_F_parse);
        if (bAttr) {
            XML.WriteXmlElement("<transport_stream_id type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + transport_stream_id + "</transport_stream_id>");
        }
        else {
            XML.WriteXmlElement("<transport_stream_id bitLen=\"" + _F_parse + "\">" + transport_stream_id + "</transport_stream_id>");
        }
        _F_bs.skipbits(2);
        _F_parse = 5;
        version_number = _F_bs.getbits(_F_parse);
        if (bAttr) {
            XML.WriteXmlElement("<version_number type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + version_number + "</version_number>");
        }
        else {
            XML.WriteXmlElement("<version_number bitLen=\"" + _F_parse + "\">" + version_number + "</version_number>");
        }
        _F_parse = 1;
        current_next_indicator = _F_bs.getbits(_F_parse);
        if (bAttr) {
            XML.WriteXmlElement("<current_next_indicator type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + current_next_indicator + "</current_next_indicator>");
        }
        else {
            XML.WriteXmlElement("<current_next_indicator bitLen=\"" + _F_parse + "\">" + current_next_indicator + "</current_next_indicator>");
        }
        _F_parse = 8;
        section_number = _F_bs.getbits(_F_parse);
        if (bAttr) {
            XML.WriteXmlElement("<section_number type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + section_number + "</section_number>");
        }
        else {
            XML.WriteXmlElement("<section_number bitLen=\"" + _F_parse + "\">" + section_number + "</section_number>");
        }
        _F_parse = 8;
        last_section_number = _F_bs.getbits(_F_parse);
        if (bAttr) {
            XML.WriteXmlElement("<last_section_number type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + last_section_number + "</last_section_number>");
        }
        else {
            XML.WriteXmlElement("<last_section_number bitLen=\"" + _F_parse + "\">" + last_section_number + "</last_section_number>");
        }
        total_pat_program = (section_length-9)/4;
        for (loop_cnt=0; loop_cnt<total_pat_program; loop_cnt++) {
            program = new PATProgram();
            XML.IntoAClass("program", 0);
            _F_ret += program.putxml(_F_bs, bAttr);
            XML.OutOfClass("</program>");
            if (1==0) break;
        }
        _F_parse = 32;
        CRC_32 = _F_bs.getbits(_F_parse);
        if (bAttr) {
            XML.WriteXmlElement("<CRC_32 type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + CRC_32 + "</CRC_32>");
        }
        else {
            XML.WriteXmlElement("<CRC_32 bitLen=\"" + _F_parse + "\">" + CRC_32 + "</CRC_32>");
        }
        return _F_ret;
    }
}
